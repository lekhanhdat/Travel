import axios from 'axios';
import {env} from '../utils/env';

// OpenAI API Configuration
const OPENAI_API_KEY = env.OPENAI_API_KEY || '';
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

// SerpAPI Configuration (Google Images search)
const SERPAPI_KEY = env.SERPAPI_KEY || '';
const SERPAPI_URL = 'https://serpapi.com/search.json';

// Debug: Log API key (first 10 chars only for security)
console.log('üîë SERPAPI_KEY loaded:', SERPAPI_KEY ? `${SERPAPI_KEY.substring(0, 10)}...` : 'EMPTY');

export interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string | Array<{type: 'text' | 'image_url'; text?: string; image_url?: {url: string}}>;
}

export interface ChatResponse {
  message: string;
  error?: string;
  imageUrl?: string; // URL of generated image (if any)
}

export interface ImageGenerationResponse {
  imageUrl?: string;
  imageUrls?: string[]; // Multiple images
  error?: string;
}

/**
 * Send message to OpenAI ChatGPT API
 * @param messages - Array of chat messages (conversation history)
 * @param systemPrompt - Optional system prompt to set chatbot behavior
 * @returns ChatResponse with assistant's reply
 */
export const sendChatMessage = async (
  messages: ChatMessage[],
  systemPrompt?: string,
): Promise<ChatResponse> => {
  try {
    // Build messages array with system prompt
    const apiMessages: ChatMessage[] = [];

    // Add system prompt if provided
    if (systemPrompt) {
      apiMessages.push({
        role: 'system',
        content: systemPrompt,
      });
    } else {
      // Default system prompt for travel assistant
      apiMessages.push({
        role: 'system',
        content: `B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh c·ªßa ·ª©ng d·ª•ng du l·ªãch ƒê√† N·∫µng.
Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
- T∆∞ v·∫•n v·ªÅ c√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch t·∫°i ƒê√† N·∫µng
- Gi·ªõi thi·ªáu c√°c hi·ªán v·∫≠t l·ªãch s·ª≠, vƒÉn h√≥a
- H∆∞·ªõng d·∫´n l·ªãch tr√¨nh du l·ªãch
- Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ·∫©m th·ª±c, kh√°ch s·∫°n, di chuy·ªÉn
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† nhi·ªát t√¨nh
- C√¢u tr·∫£ l·ªùi chi ti·∫øt, ƒë·∫ßy ƒë·ªß th√¥ng tin
- C√≥ th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh n·∫øu ng∆∞·ªùi d√πng g·ª≠i ·∫£nh

**QUAN TR·ªåNG - Khi ng∆∞·ªùi d√πng y√™u c·∫ßu xem/t√¨m ·∫£nh:**
- Keywords: "cho t√¥i xem ·∫£nh", "t√¨m ·∫£nh", "·∫£nh c·ªßa", "h√¨nh ·∫£nh v·ªÅ", "show me", "find image"
- Tr·∫£ l·ªùi ng·∫Øn g·ªçn: "ƒê√¢y l√† [s·ªë l∆∞·ª£ng] ·∫£nh [ƒë·ªãa ƒëi·ªÉm]!" (v√≠ d·ª•: "ƒê√¢y l√† 3 ·∫£nh C·∫ßu R·ªìng ƒê√† N·∫µng!")
- H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m ·∫£nh qua SerpAPI v√† hi·ªÉn th·ªã
- M·∫∂C ƒê·ªäNH: G·ª≠i 3 ·∫£nh n·∫øu user kh√¥ng ch·ªâ ƒë·ªãnh s·ªë l∆∞·ª£ng
- N·∫øu user y√™u c·∫ßu s·ªë l∆∞·ª£ng c·ª• th·ªÉ (v√≠ d·ª•: "cho t√¥i 5 ·∫£nh", "t√¨m 1 ·∫£nh"), tr·∫£ l·ªùi theo s·ªë l∆∞·ª£ng ƒë√≥
- V√≠ d·ª•:
  + User: "Cho t√¥i xem ·∫£nh C·∫ßu R·ªìng" ‚Üí AI: "ƒê√¢y l√† 3 ·∫£nh C·∫ßu R·ªìng ƒê√† N·∫µng!" (m·∫∑c ƒë·ªãnh 3 ·∫£nh)
  + User: "T√¨m 5 ·∫£nh B√† N√† Hills" ‚Üí AI: "ƒê√¢y l√† 5 ·∫£nh B√† N√† Hills!" (theo y√™u c·∫ßu 5 ·∫£nh)
  + User: "Cho t√¥i 1 ·∫£nh bi·ªÉn M·ªπ Kh√™" ‚Üí AI: "ƒê√¢y l√† ·∫£nh bi·ªÉn M·ªπ Kh√™!" (theo y√™u c·∫ßu 1 ·∫£nh)`,
      });
    }

    // Add conversation history
    apiMessages.push(...messages);

    console.log('üì§ Sending to OpenAI:', {
      messageCount: apiMessages.length,
      lastMessage: messages[messages.length - 1]?.content,
    });

    // Call OpenAI API
    const response = await axios.post(
      OPENAI_API_URL,
      {
        model: 'gpt-4o-mini', // GPT-4o-mini: Fast, cost-effective, supports vision
        messages: apiMessages,
        temperature: 0.7,
        max_tokens: 1000, // Balanced for speed
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        timeout: 30000, // 30 seconds timeout
      },
    ).catch(err => {
      // Log detailed error for debugging
      console.error('‚ùå OpenAI API Error Details:', {
        status: err.response?.status,
        statusText: err.response?.statusText,
        error: err.response?.data?.error,
        message: err.response?.data?.error?.message,
      });
      throw err;
    });

    const assistantMessage = response.data.choices[0]?.message?.content || '';

    console.log('‚úÖ OpenAI response received:', {
      length: assistantMessage.length,
      preview: assistantMessage.substring(0, 50) + '...',
    });

    return {
      message: assistantMessage,
    };
  } catch (error: any) {
    console.error('‚ùå Error calling OpenAI API:', error);

    // Handle specific errors
    if (error.response) {
      const status = error.response.status;
      const errorData = error.response.data;

      if (status === 401) {
        return {
          message: '',
          error: 'API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.',
        };
      } else if (status === 429) {
        return {
          message: '',
          error: 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.',
        };
      } else if (status === 500) {
        return {
          message: '',
          error: 'L·ªói server OpenAI. Vui l√≤ng th·ª≠ l·∫°i sau.',
        };
      } else {
        return {
          message: '',
          error: `L·ªói API: ${errorData?.error?.message || 'Unknown error'}`,
        };
      }
    } else if (error.code === 'ECONNABORTED') {
      return {
        message: '',
        error: 'Timeout: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server.',
      };
    } else {
      return {
        message: '',
        error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
      };
    }
  }
};

/**
 * Extract number of images requested from user message
 * @param message - User's message
 * @returns Number of images to fetch (default: 3)
 */
const extractImageCount = (message: string): number => {
  const lowerMessage = message.toLowerCase();

  // Match patterns like "5 ·∫£nh", "10 h√¨nh", "1 ·∫£nh", etc.
  const match = lowerMessage.match(/(\d+)\s*(·∫£nh|h√¨nh|image|photo)/);

  if (match) {
    const count = parseInt(match[1], 10);
    // Limit to max 10 images to avoid excessive API calls
    return Math.min(count, 10);
  }

  // Default: 3 images
  return 3;
};

/**
 * Search and get images from SerpAPI (Google Images)
 * @param query - Search query (e.g., "C·∫ßu R·ªìng ƒê√† N·∫µng")
 * @param count - Number of images to fetch (default: 3)
 * @returns ImageGenerationResponse with image URLs or error
 */
export const searchImage = async (
  query: string,
  count: number = 3,
): Promise<ImageGenerationResponse> => {
  try {
    console.log(`üîç Searching ${count} images via SerpAPI:`, query);

    // Call SerpAPI for Google Images search
    const response = await axios.get(SERPAPI_URL, {
      params: {
        engine: 'google_images',
        q: query,
        api_key: SERPAPI_KEY,
        num: count, // Get specified number of images
      },
      timeout: 10000,
    });

    console.log('üì• SerpAPI response:', response.data);

    // Extract images from results
    const images = response.data.images_results;

    if (!images || images.length === 0) {
      return {
        error: 'Kh√¥ng t√¨m th·∫•y ·∫£nh ph√π h·ª£p.',
      };
    }

    // Get image URLs (original or thumbnail)
    const imageUrls = images
      .slice(0, count)
      .map((img: any) => img.original || img.thumbnail)
      .filter((url: string) => url); // Remove any undefined URLs

    console.log(`‚úÖ ${imageUrls.length} images found via SerpAPI`);

    return {
      imageUrls,
    };
  } catch (error: any) {
    console.error('‚ùå Error searching image:', error);
    console.error('‚ùå Error response:', error.response?.data);

    if (error.response) {
      const status = error.response.status;
      const errorData = error.response.data;

      if (status === 401) {
        return {
          error: 'SerpAPI key kh√¥ng h·ª£p l·ªá.',
        };
      } else if (status === 429) {
        return {
          error: 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.',
        };
      } else {
        return {
          error: `L·ªói t√¨m ·∫£nh: ${errorData?.error || 'Unknown error'}`,
        };
      }
    } else if (error.code === 'ECONNABORTED') {
      return {
        error: 'Timeout: T√¨m ·∫£nh m·∫•t qu√° nhi·ªÅu th·ªùi gian.',
      };
    } else {
      return {
        error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn SerpAPI.',
      };
    }
  }
};

// Export extractImageCount for use in ChatbotScreen
export {extractImageCount};

/**
 * Detect if user wants to VIEW/FIND an existing image (use Unsplash)
 * @param message - User's message
 * @returns true if user wants to see an existing image
 */
export const isImageSearchRequest = (message: string): boolean => {
  const lowerMessage = message.toLowerCase();

  const findKeywords = [
    'cho t√¥i xem ·∫£nh',
    'cho xem ·∫£nh',
    't√¨m ·∫£nh',
    '·∫£nh c·ªßa',
    '·∫£nh v·ªÅ',
    'h√¨nh ·∫£nh v·ªÅ',
    'h√¨nh ·∫£nh c·ªßa',
    'show me',
    'show image',
    'find image',
    'search image',
    'xem ·∫£nh',
    'c√≥ ·∫£nh',
    '·∫£nh n√†o',
    'picture of',
    'photo of',
  ];

  return findKeywords.some(keyword => lowerMessage.includes(keyword));
};

/**
 * Get quick reply suggestions based on context
 */
export const getQuickReplies = (): string[] => {
  return [
    'ƒê·ªãa ƒëi·ªÉm n·ªïi ti·∫øng ·ªü ƒê√† N·∫µng?',
    'M√≥n ƒÉn ƒë·∫∑c s·∫£n n√™n th·ª≠?',
    'L·ªãch tr√¨nh 3 ng√†y 2 ƒë√™m?',
    'Kh√°ch s·∫°n g·∫ßn bi·ªÉn?',
  ];
};

